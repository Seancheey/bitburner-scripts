// Defines the "target server", which is the server
// that we're going to hack. In this case, it's "n00dles"

export async function main(ns) {
    let args = [...ns.args]
    if (!isNaN(parseInt(args[0]))) {
        args.shift()
    }
    var target = args[0];
    var threadCount = args[1]; // thread count passed as arg
    var hackPct = args[2]; // hackPercent() passed as arg
    var minSecurity = args[3];
    var serverMaxMoney = args[4];

    var maxHackPercent = args[5] || 0.02; // 2%
    var moneyPercent = args[6] || Math.random() * 0.1 + 0.9; // 90%-100%
    var securityDiff = args[7] || Math.random() * 3 // 0-3

    if (!target || !threadCount || !hackPct || !minSecurity || !serverMaxMoney) {
        ns.toast("Unable to run exploit: insufficient argument: target & thread count & hackPercent & minSecurity & serverMaxMoney", 'error')
        return;
    }

    var moneyThresh = serverMaxMoney * moneyPercent;
    var securityThresh = Math.min(minSecurity + securityDiff + threadCount * 0.05, minSecurity + 20, 80);
    var hackThreadCount = Math.floor(Math.min(threadCount, maxHackPercent / hackPct))

    ns.print("money threshold = " + moneyPercent)
    ns.print("security threshold = " + securityThresh + '/' + minSecurity)
    ns.print("hackThreadCount = " + hackThreadCount + " = " + hackThreadCount * hackPct * 100 + "%")

    while (true) {
        if (ns.getServerSecurityLevel(target) > securityThresh) {
            await ns.weaken(target);
        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {
            await ns.grow(target);
        } else {
            await ns.hack(target);
        }
    }
}